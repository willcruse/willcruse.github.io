{"version":3,"sources":["GitHubProjects.js","App.js","serviceWorker.js","index.js","willPic.jpg"],"names":["GitHubProject","props","Card","style","marginBottom","Header","value","name","Body","description","Text","Link","href","html_url","GitHubProjects","useState","projects","updateProjects","useEffect","fetch","then","resp","json","sort","a","b","Date","parse","updated_at","filter","val","Container","fluid","Row","map","ind","key","ProfileComp","maxWidth","Img","src","logo","variant","Title","App","marginTop","Col","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message","module","exports"],"mappings":"kRA8BMA,EAAgB,SAAAC,GAAK,OACzB,kBAACC,EAAA,EAAD,CAAMC,MAAO,CAACC,aAAc,WAC1B,kBAACF,EAAA,EAAKG,OAAN,KAAcJ,EAAMK,MAAMC,MAC1B,kBAACL,EAAA,EAAKM,KAAN,KACgC,MAA3BP,EAAMK,MAAMG,YAAsB,qCAAQ,kBAACP,EAAA,EAAKQ,KAAN,KAAYT,EAAMK,MAAMG,aACrE,kBAACP,EAAA,EAAKS,KAAN,CAAWC,KAAMX,EAAMK,MAAMO,UAA7B,kBAKSC,EArCQ,WAAO,IAAD,EACQC,mBAAS,IADjB,mBACpBC,EADoB,KACVC,EADU,KAe3B,OAZAC,qBAAU,WACRC,MAAM,gDACHC,MAAK,SAAAC,GACJ,OAAOA,EAAKC,UAEbF,MAAK,SAAAE,GACJA,EAAKC,MAAK,SAACC,EAAGC,GACV,OAAQC,KAAKC,MAAMF,EAAEG,YAAcF,KAAKC,MAAMH,EAAEI,eAEpDX,EAAeK,EAAKO,QAAO,SAAAC,GAAG,MAAiB,SAAbA,EAAIvB,cAEzC,IAED,kBAACwB,EAAA,EAAD,CAAWC,OAAK,GACd,kBAACC,EAAA,EAAD,KACE,6CAEDjB,EAASkB,KAAI,SAACJ,EAAKK,GAClB,OAAO,kBAAC,EAAD,CAAe7B,MAAOwB,EAAKM,IAAKD,SCH/C,IAAME,EAAc,WAClB,OACE,kBAACnC,EAAA,EAAD,CAAMC,MAAO,CAACmC,SAAU,UACtB,kBAACpC,EAAA,EAAKqC,IAAN,CAAUC,IAAKC,IAAMC,QAAQ,QAC7B,kBAACxC,EAAA,EAAKG,OAAN,KAAa,0CACb,kBAACH,EAAA,EAAKM,KAAN,KACE,kBAACN,EAAA,EAAKyC,MAAN,KAAY,wCACZ,kBAACzC,EAAA,EAAKQ,KAAN,kFAWOkC,EAjCf,WACE,OACE,kBAACb,EAAA,EAAD,CAAWC,OAAK,EAAC7B,MAAO,CAAC0C,UAAW,SAClC,kBAACZ,EAAA,EAAD,KACE,kBAACa,EAAA,EAAD,KACE,kBAAC,EAAD,OAEF,kBAACA,EAAA,EAAD,KACE,kBAAC,EAAD,UCFUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtC,MAAK,SAAAuC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBEzI5BC,EAAOC,QAAU,IAA0B,sC","file":"static/js/main.50fe2f99.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Container, Row, Card } from \"react-bootstrap\";\n\nconst GitHubProjects = () => {\n  const [projects, updateProjects] = useState([]);\n\n  useEffect(() => {\n    fetch(\"https://api.github.com/users/willcruse/repos\")\n      .then(resp => {\n        return resp.json();\n      })\n      .then(json => {\n        json.sort((a, b) => {\n            return  Date.parse(b.updated_at) - Date.parse(a.updated_at) \n        })\n        updateProjects(json.filter(val => val.name !== \"wiki\"));\n      });\n  }, []);\n  return (\n    <Container fluid>\n      <Row>\n        <h1>GitHub Repos</h1>\n      </Row>\n      {projects.map((val, ind) => {\n        return <GitHubProject value={val} key={ind} />;\n      })}\n    </Container>\n  );\n};\n\nconst GitHubProject = props => (\n  <Card style={{marginBottom: \"0.5rem\"}}>\n    <Card.Header>{props.value.name}</Card.Header>\n    <Card.Body>\n        {props.value.description == null ? <></> : <Card.Text>{props.value.description}</Card.Text>}\n      <Card.Link href={props.value.html_url}>GitHub Repo</Card.Link>\n    </Card.Body>\n  </Card>\n);\n\nexport default GitHubProjects;\n","import React from \"react\";\nimport logo from \"./willPic.jpg\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Container, Row, Col, Card } from \"react-bootstrap\";\nimport GitHubProjects from \"./GitHubProjects\"\n\nfunction App() {\n  return (\n    <Container fluid style={{marginTop: \"1rem\"}}>\n      <Row>\n        <Col>\n          <ProfileComp />\n        </Col>\n        <Col>\n          <GitHubProjects />\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nconst ProfileComp = () => {\n  return (\n    <Card style={{maxWidth: '15rem'}}>\n      <Card.Img src={logo} variant=\"top\"/>\n      <Card.Header><b>Will Cruse</b></Card.Header>\n      <Card.Body>\n        <Card.Title><b>About Me</b></Card.Title>\n        <Card.Text>\n          I am a second year Computer Science student at the University of Bath.\n        </Card.Text>\n      </Card.Body>\n    </Card>\n  );\n};\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/willPic.deedb59a.jpg\";"],"sourceRoot":""}